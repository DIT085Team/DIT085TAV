/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import org.mockito.internal.MockitoCore;

import controller.Actuator;
import controller.CarImp;
import model.Lidar;
import model.Radar;

import org.junit.Before;
import org.junit.Rule;

import static org.junit.Assert.*;

public class CarTest {
	private CarImp auto;
	
	@Mock
	Actuator act = mock(Actuator.class);
	
	//Instantiating a new automobile object for each test case
	@Before
    public void setUp() {
		auto = new CarImp(3, 0, act);
		
    	auto.r1 = mock(Radar.class);
    	auto.r2 = mock(Radar.class);
    	auto.r3 = mock(Radar.class);
    	auto.r4 = mock(Radar.class);
    	auto.r5 = mock(Radar.class);
    	auto.r6 = mock(Radar.class);
    	auto.l1 = mock(Lidar.class);
    	auto.l2 = mock(Lidar.class);
    }
	//Test 1 || Test that WhereIs returns a value
    @Test public void testThatWhereIsReturnNotNull(){
    	assertNotNull(auto.whereIs());
    }
    //Test 2 ||  Tests that it will return the values of the initialized car.
    @Test public void testThatWhereIsReturnAutoXAndY(){
    	assertArrayEquals(new int [] {auto.carPos.getX(), auto.carPos.getY()}, auto.whereIs());
    }
    //Test 3 || Tests that it returns the values of the car even if it's unexpected values and outside the track.
    @Test public void testWhereIsUnexpectedVaules() {
    	auto.carPos.setX(-567);
    	auto.carPos.setY(1337);
    	System.out.println(auto.carPos.getX());
    	System.out.println(auto.carPos.getY());
    	//assertEquals(auto.whereIs(), "Longitude:" + auto.x + " latitude:" + auto.y);
    	assertArrayEquals(new int [] {-567, 1337}, auto.whereIs());
    }
    
    //Test 4 ||  This test runs the moveForward method from the position 96, 
    // the car should not moveForward.
    @Test public void maxDistance() {
    	when(auto.act.moveCar(auto.carPos, 5)).thenReturn(96);
	    assertEquals("we check if starting value is correct",96, auto.moveForward());
	}
    //Test 5 ||  This test will test when the input is 50 the output should give 55
    // else the test case fails.	
    @Test public void fiveDistance() {
	  //  auto.y=50;
		//auto.moveForward(auto);
    	when(auto.act.moveCar(auto.carPos, 5)).thenReturn(55);
		//System.out.println(auto.y);
	    assertEquals("we check if starting value is correct",55, auto.moveForward());
    }
    //Test 6 ||  This test runs the moveForward method from the position 97, 
    // the car should not moveForward.	
    @Test public void maxDistanceV2() {
	   // auto.y=97;
		//auto.moveForward(auto);
    	when(auto.act.moveCar(auto.carPos, 5)).thenReturn(97);
		//System.out.println(auto.y);
	    assertEquals("we check if starting value is correct",97, auto.moveForward());
    }
    //Test 7 ||  this test is when a faulty position is given, the output should return -1.	
    @Test public void underDistance() {
	  //  auto.y=-1;
    	when(auto.act.moveCar(auto.carPos, 5)).thenReturn(-1);
	    assertEquals("we check if starting value is correct",-1, auto.moveForward());
    }
    //Test 8 ||  this test is when a faulty position is given, the output should return -1.	
    @Test public void overDistance() {
	    //auto.y=101;
    	when(auto.act.moveCar(auto.carPos, 5)).thenReturn(-1);
	    assertEquals("we check if starting value is correct",-1, auto.moveForward());
    }
    //Test 9 ||  This test will test when the input is 95 the output should give 100
    // else the test case fails.	
    @Test public void distanceTest() {
	   // auto.y=95;
	    //auto.moveForward(auto);
		//System.out.println(auto.y);
    	when(auto.act.moveCar(auto.carPos, 5)).thenReturn(100);
	    assertEquals("we check if starting value is correct",100, auto.moveForward());
    }
    
    //Test 10 || Testing a normal scenario were a car is not detected.
    @Test public void noCarDetected() {
    	when(auto.r1.getReading()).thenReturn(30);
    	when(auto.r2.getReading()).thenReturn(34);
    	when(auto.r3.getReading()).thenReturn(28);
    	when(auto.l1.getReading()).thenReturn(26);
    	when(auto.r4.getReading()).thenReturn(30);
    	when(auto.r5.getReading()).thenReturn(34);
    	when(auto.r6.getReading()).thenReturn(28);
    	when(auto.l2.getReading()).thenReturn(26);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};

    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 11 || Testing with one of the sensors having a faulty reading but otherwise no car is detected.
    @Test public void oneFaultyReading() {   	
    	when(auto.r1.getReading()).thenReturn(930);
    	when(auto.r2.getReading()).thenReturn(41);
    	when(auto.r3.getReading()).thenReturn(44);
    	when(auto.l1.getReading()).thenReturn(39);
    	when(auto.r4.getReading()).thenReturn(930);
    	when(auto.r5.getReading()).thenReturn(41);
    	when(auto.r6.getReading()).thenReturn(44);
    	when(auto.l2.getReading()).thenReturn(39);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};
    	
    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 12 || Testing with 2 faulty readings from radar 1 and 2. An error should be returned.
    @Test public void twoFaultyReadings1() {   	
    	when(auto.r1.getReading()).thenReturn(865);
    	when(auto.r2.getReading()).thenReturn(430);
    	when(auto.r3.getReading()).thenReturn(17);
    	when(auto.l1.getReading()).thenReturn(15);
    	when(auto.r4.getReading()).thenReturn(865);
    	when(auto.r5.getReading()).thenReturn(430);
    	when(auto.r6.getReading()).thenReturn(17);
    	when(auto.l2.getReading()).thenReturn(15);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};

    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 13 || Testing with 2 faulty readings from radar 3 and the lidar. An error should be returned.
    @Test public void twoFaultyReadings2() {
    	when(auto.r1.getReading()).thenReturn(28);
    	when(auto.r2.getReading()).thenReturn(30);
    	when(auto.r3.getReading()).thenReturn(460);
    	when(auto.l1.getReading()).thenReturn(370);
    	when(auto.r4.getReading()).thenReturn(28);
    	when(auto.r5.getReading()).thenReturn(30);
    	when(auto.r6.getReading()).thenReturn(460);
    	when(auto.l2.getReading()).thenReturn(370);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 14 || Testing 2 faulty readings with a sensor also detecting a nearby car.
    //Error about the faulty readings should take precedence, thus returning an error.
    @Test public void twoFaultyReadingsWithNearbyCar() {
    	when(auto.r1.getReading()).thenReturn(4);
    	when(auto.r2.getReading()).thenReturn(259);
    	when(auto.r3.getReading()).thenReturn(270);
    	when(auto.l1.getReading()).thenReturn(15);
    	when(auto.r4.getReading()).thenReturn(4);
    	when(auto.r5.getReading()).thenReturn(259);
    	when(auto.r6.getReading()).thenReturn(270);
    	when(auto.l2.getReading()).thenReturn(15);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 15 || Testing if the car confirms the detection of a car from radar 1
    @Test public void nearbyCarDetectedRadar1() {
    	when(auto.r1.getReading()).thenReturn(4);
    	when(auto.r2.getReading()).thenReturn(10);
    	when(auto.r3.getReading()).thenReturn(7);
    	when(auto.l1.getReading()).thenReturn(13);
    	when(auto.r4.getReading()).thenReturn(4);
    	when(auto.r5.getReading()).thenReturn(10);
    	when(auto.r6.getReading()).thenReturn(7);
    	when(auto.l2.getReading()).thenReturn(13);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 16 || Testing if the car confirms the detection of a car from radar 2
    @Test public void nearbyCarDetectedRadar2() {
    	when(auto.r1.getReading()).thenReturn(12);
    	when(auto.r2.getReading()).thenReturn(3);
    	when(auto.r3.getReading()).thenReturn(8);
    	when(auto.l1.getReading()).thenReturn(9);
    	when(auto.r4.getReading()).thenReturn(12);
    	when(auto.r5.getReading()).thenReturn(3);
    	when(auto.r6.getReading()).thenReturn(8);
    	when(auto.l2.getReading()).thenReturn(9);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 17 || Testing if the car confirms the detection of a car from radar 3
    @Test public void nearbyCarDetectedRadar3() {
    	when(auto.r1.getReading()).thenReturn(8);
    	when(auto.r2.getReading()).thenReturn(10);
    	when(auto.r3.getReading()).thenReturn(2);
    	when(auto.l1.getReading()).thenReturn(7);
    	when(auto.r4.getReading()).thenReturn(8);
    	when(auto.r5.getReading()).thenReturn(10);
    	when(auto.r6.getReading()).thenReturn(2);
    	when(auto.l2.getReading()).thenReturn(7);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 18 || Testing if the car confirms the detection of a car from lidar
    @Test public void nearbyCarDetectedRadar4() {
    	when(auto.r1.getReading()).thenReturn(13);
    	when(auto.r2.getReading()).thenReturn(14);
    	when(auto.r3.getReading()).thenReturn(12);
    	when(auto.l1.getReading()).thenReturn(3);
    	when(auto.r4.getReading()).thenReturn(13);
    	when(auto.r5.getReading()).thenReturn(14);
    	when(auto.r6.getReading()).thenReturn(12);
    	when(auto.l2.getReading()).thenReturn(3);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 19 || Testing 1 faulty reading with a sensor also detecting a nearby car.
    //Return car detected.
    @Test public void oneFaultyReadingWithNearbyCar() {
    	when(auto.r1.getReading()).thenReturn(300);
    	when(auto.r2.getReading()).thenReturn(2);
    	when(auto.r3.getReading()).thenReturn(13);
    	when(auto.l1.getReading()).thenReturn(7);
    	when(auto.r4.getReading()).thenReturn(300);
    	when(auto.r5.getReading()).thenReturn(2);
    	when(auto.r6.getReading()).thenReturn(13);
    	when(auto.l2.getReading()).thenReturn(7);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 20 || Testing how the system handles a negative faulty reading.
    //Return faulty readings error as well.
    @Test public void negativeFaultyReadings() {
    	when(auto.r1.getReading()).thenReturn(-42);
    	when(auto.r2.getReading()).thenReturn(18);
    	when(auto.r3.getReading()).thenReturn(15);
    	when(auto.l1.getReading()).thenReturn(203);
    	when(auto.r4.getReading()).thenReturn(-42);
    	when(auto.r5.getReading()).thenReturn(18);
    	when(auto.r6.getReading()).thenReturn(15);
    	when(auto.l2.getReading()).thenReturn(203);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 21 || Testing the lowest possible detection reading.
    @Test public void nearbyCarDetectedLowerBoundary() {
    	when(auto.r1.getReading()).thenReturn(0);
    	when(auto.r2.getReading()).thenReturn(12);
    	when(auto.r3.getReading()).thenReturn(30);
    	when(auto.l1.getReading()).thenReturn(0);
    	when(auto.r4.getReading()).thenReturn(0);
    	when(auto.r5.getReading()).thenReturn(12);
    	when(auto.r6.getReading()).thenReturn(30);
    	when(auto.l2.getReading()).thenReturn(0);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 22 || Testing the highest possible detection reading.
    @Test public void nearbyCarDetectedUpperBoundary() {
    	when(auto.r1.getReading()).thenReturn(5);
    	when(auto.r2.getReading()).thenReturn(14);
    	when(auto.r3.getReading()).thenReturn(17);
    	when(auto.l1.getReading()).thenReturn(5);
    	when(auto.r4.getReading()).thenReturn(5);
    	when(auto.r5.getReading()).thenReturn(14);
    	when(auto.r6.getReading()).thenReturn(17);
    	when(auto.l2.getReading()).thenReturn(5);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 23 || Testing highest possible non-faulty reading
    @Test public void noCarDetectedUpperBoundary() {
    	when(auto.r1.getReading()).thenReturn(50);
    	when(auto.r2.getReading()).thenReturn(25);
    	when(auto.r3.getReading()).thenReturn(50);
    	when(auto.l1.getReading()).thenReturn(23);
    	when(auto.r4.getReading()).thenReturn(50);
    	when(auto.r5.getReading()).thenReturn(25);
    	when(auto.r6.getReading()).thenReturn(50);
    	when(auto.l2.getReading()).thenReturn(23);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidars, 0));
    }
    
    //Test 24 || Testing how the system handles all sensor readings being faulty.
    @Test public void allFaultyReadings() {
    	when(auto.r1.getReading()).thenReturn(305);
    	when(auto.r2.getReading()).thenReturn(800);
    	when(auto.r3.getReading()).thenReturn(340);
    	when(auto.l1.getReading()).thenReturn(200);
    	when(auto.r4.getReading()).thenReturn(305);
    	when(auto.r5.getReading()).thenReturn(800);
    	when(auto.r6.getReading()).thenReturn(340);
    	when(auto.l2.getReading()).thenReturn(200);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidars, 0));
    }
	
	//Test 25 || Testing how the system handles one false, zero and positive reading .
    @Test public void detectedCarOnLeftLanePostionTwoWithZeroReading() {
    	when(auto.r1.getReading()).thenReturn(5);
    	when(auto.r2.getReading()).thenReturn(4);
    	when(auto.r3.getReading()).thenReturn(17);
    	when(auto.l1.getReading()).thenReturn(5);
    	when(auto.r4.getReading()).thenReturn(5);
    	when(auto.r5.getReading()).thenReturn(4);
    	when(auto.r6.getReading()).thenReturn(17);
    	when(auto.l2.getReading()).thenReturn(5);
    	
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	

		auto.carPos.setY(0); 
	  	auto.carPos.setX(2);

    	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidars));
    }
    
	  //Test 26 || Testing how the system handles one false,two positive reading .
	@Test public void detectedCarOnLeftLanePostionTwoWithTwoPositive() {
    	when(auto.r1.getReading()).thenReturn(0);
    	when(auto.r2.getReading()).thenReturn(12);
    	when(auto.r3.getReading()).thenReturn(30);
    	when(auto.l1.getReading()).thenReturn(0);
    	when(auto.r4.getReading()).thenReturn(0);
    	when(auto.r5.getReading()).thenReturn(12);
    	when(auto.r6.getReading()).thenReturn(30);
    	when(auto.l2.getReading()).thenReturn(0);

    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
   		
		auto.carPos.setY(20); 
	  	auto.carPos.setX(2);
	  	
	  	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidars));
	 }
   
  //Test 27 || Testing how the system handles all positive reading .
   @Test public void noDetectedCarOnLeftLanePostion2AllPositive() {
    	when(auto.r1.getReading()).thenReturn(930);
    	when(auto.r2.getReading()).thenReturn(41);
    	when(auto.r3.getReading()).thenReturn(44);
    	when(auto.l1.getReading()).thenReturn(39);
    	when(auto.r4.getReading()).thenReturn(930);
    	when(auto.r5.getReading()).thenReturn(41);
    	when(auto.r6.getReading()).thenReturn(44);
    	when(auto.l2.getReading()).thenReturn(39);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
  		
	   	auto.carPos.setY(20);
	   	auto.carPos.setX(2);
	   	
	   	when(act.changeOneLane(auto.carPos)).thenReturn(1);	   	
	   	assertEquals("Lane changed", auto.changeLane(auto, radars, lidars));
   }
	
  //Test 28 || Testing how the system handles negative reading .
  @Test public void noDetectedCarOnLeftLanePostionThreeWithNegativeReading() {
  	    when(auto.r1.getReading()).thenReturn(30);
  	    when(auto.r2.getReading()).thenReturn(34);
	  	when(auto.r3.getReading()).thenReturn(28);
	  	when(auto.l1.getReading()).thenReturn(26);
  	    when(auto.r4.getReading()).thenReturn(30);
  	    when(auto.r5.getReading()).thenReturn(34);
	  	when(auto.r6.getReading()).thenReturn(28);
	  	when(auto.l2.getReading()).thenReturn(26);
	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
		
	   	auto.carPos.setY(-1);
	   	auto.carPos.setX(3);

	  	assertEquals("y value incorrect", auto.changeLane(auto, radars, lidars));
  }
  
  //Test 29 || Testing how the system handles one false,two positive reading .
  @Test public void noDetectedCarOnLeftLanePostionThreeOutOfBoundReading() { 	
  	    when(auto.r1.getReading()).thenReturn(30);
  	    when(auto.r2.getReading()).thenReturn(34);
	  	when(auto.r3.getReading()).thenReturn(28);
	  	when(auto.l1.getReading()).thenReturn(26);
  	    when(auto.r4.getReading()).thenReturn(30);
  	    when(auto.r5.getReading()).thenReturn(34);
	  	when(auto.r6.getReading()).thenReturn(28);
	  	when(auto.l2.getReading()).thenReturn(26);
	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
		
	   	auto.carPos.setY(96);
	   	auto.carPos.setX(3);
	   	
	  	assertEquals("y value incorrect", auto.changeLane(auto, radars, lidars));
  }
  
  //Test 30 || Testing faulty readings on lower bounds value .
    @Test public void errorFaultyReadingLeftLaneTwoWithNegativePosition() {
   	    when(auto.r1.getReading()).thenReturn(4);
   	    when(auto.r2.getReading()).thenReturn(259);
 	  	when(auto.r3.getReading()).thenReturn(270);
 	  	when(auto.l1.getReading()).thenReturn(15);
   	    when(auto.r4.getReading()).thenReturn(4);
   	    when(auto.r5.getReading()).thenReturn(259);
 	  	when(auto.r6.getReading()).thenReturn(270);
 	  	when(auto.l2.getReading()).thenReturn(15);
 	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
 		
 	   	auto.carPos.setY(-1);
 	   	auto.carPos.setX(2);
    	assertEquals("Lane change failed,Error:faulty readings", auto.changeLane(auto, radars, lidars));
   }
	
   //Test 31 || Testing how the negative value when negative input detected .
    @Test public void negativeDetectedCarOnLeftLanePostionThree() {
        when(auto.r1.getReading()).thenReturn(8);
        when(auto.r2.getReading()).thenReturn(10);
  	  	when(auto.r3.getReading()).thenReturn(2);
  	  	when(auto.l1.getReading()).thenReturn(7);
        when(auto.r4.getReading()).thenReturn(8);
        when(auto.r5.getReading()).thenReturn(10);
  	  	when(auto.r6.getReading()).thenReturn(2);
  	  	when(auto.l2.getReading()).thenReturn(7);
  	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
  		
  	   	auto.carPos.setY(-1);
  	   	auto.carPos.setX(3);
    	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidars));
  }
	
  //Test 32 || Testing how the negative value when negative input detected .
    @Test public void noDetectedCarOnLeftLanePostionThreeAllPositive() {
    	when(auto.r1.getReading()).thenReturn( 930);
    	when(auto.r2.getReading()).thenReturn(41);
	  	when(auto.r3.getReading()).thenReturn(44);
	  	when(auto.l1.getReading()).thenReturn(39);
    	when(auto.r4.getReading()).thenReturn(930);
    	when(auto.r5.getReading()).thenReturn(41);
	  	when(auto.r6.getReading()).thenReturn(44);
	  	when(auto.l2.getReading()).thenReturn(39);
	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
		
	   	auto.carPos.setY(70);
	   	auto.carPos.setX(3);
    	
    	assertEquals("Lane changed", auto.changeLane(auto, radars, lidars));
    }
    //Test 33 || 
    @Test public void errorFaultyReadingLeftLaneThreeWithUpperBound() {
        when(auto.r1.getReading()).thenReturn( -42);
        when(auto.r2.getReading()).thenReturn(18);
   	  	when(auto.r3.getReading()).thenReturn(15);
   	  	when(auto.l1.getReading()).thenReturn(203);
        when(auto.r4.getReading()).thenReturn( -42);
        when(auto.r5.getReading()).thenReturn(18);
   	  	when(auto.r6.getReading()).thenReturn(15);
   	  	when(auto.l2.getReading()).thenReturn(203);
   	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
   		
   	   	auto.carPos.setY(96);
   	   	auto.carPos.setX(3);
       	
    	assertEquals("Lane change failed,Error:faulty readings", auto.changeLane(auto, radars, lidars));
    }
    //Test 34 || 
   @Test public void errorFaultyReadingLeftLaneOneWithZeroReading() {
        when(auto.r1.getReading()).thenReturn(305);
        when(auto.r2.getReading()).thenReturn(800);
    	when(auto.r3.getReading()).thenReturn(340);
        when(auto.l1.getReading()).thenReturn(200);
        when(auto.r4.getReading()).thenReturn(305);
        when(auto.r5.getReading()).thenReturn(800);
    	when(auto.r6.getReading()).thenReturn(340);
        when(auto.l2.getReading()).thenReturn(200);
    	 		
        Lidar lidars[] = {auto.l1, auto.l2};
        Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    		
        auto.carPos.setY(0);
    	auto.carPos.setX(1);
    	assertEquals("Lane change failed,Error:faulty readings", auto.changeLane(auto, radars, lidars));
    }
	//Test 35 || 
    @Test public void detectedCarOnLanePostionOneWithZeroReading() {
        when(auto.r1.getReading()).thenReturn(5);
        when(auto.r2.getReading()).thenReturn(14);
 	  	when(auto.r3.getReading()).thenReturn(17);
 	  	when(auto.l1.getReading()).thenReturn(5);
        when(auto.r4.getReading()).thenReturn(5);
        when(auto.r5.getReading()).thenReturn(14);
 	  	when(auto.r6.getReading()).thenReturn(17);
 	  	when(auto.l2.getReading()).thenReturn(5);
 	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
 		
 	   	auto.carPos.setY(0);
 	   	auto.carPos.setX(1);
    	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidars));
    }
    
     //Test 36 || Testing readings on lower bounds value 
   @Test public void noDetectedCarOnLeftLanePostionThreeWithBoundReading()  {	   
        when(auto.r1.getReading()).thenReturn( 930);
        when(auto.r2.getReading()).thenReturn(41);
 	  	when(auto.r3.getReading()).thenReturn(44);
 	  	when(auto.l1.getReading()).thenReturn(39);
        when(auto.r4.getReading()).thenReturn(930);
        when(auto.r5.getReading()).thenReturn(41);
 	  	when(auto.r6.getReading()).thenReturn(44);
 	  	when(auto.l2.getReading()).thenReturn(39);
 	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
 		
 	   	auto.carPos.setY(95);
 	   	auto.carPos.setX(3);
	   	assertEquals("Lane changed", auto.changeLane(auto, radars, lidars));
   }
   //Test 37 || This test makes sure that the car won't change lane if the car is in the leftmost lane.
   @Test public void tryToChangeLaneFromLaneOne()  {
	   	when(auto.r1.getReading()).thenReturn(25);
        when(auto.r2.getReading()).thenReturn(25);
 	  	when(auto.r3.getReading()).thenReturn(25);
 	  	when(auto.l1.getReading()).thenReturn(25);
	   	when(auto.r4.getReading()).thenReturn(25);
        when(auto.r5.getReading()).thenReturn(25);
 	  	when(auto.r6.getReading()).thenReturn(25);
 	  	when(auto.l2.getReading()).thenReturn(25);
 	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
 	  	auto.carPos.setY(50);
 	   	auto.carPos.setX(1);
 		
	   	assertEquals("Can't change from this lane", auto.changeLane(auto, radars, lidars));
  }
   //Test 38 || Test that the car won't move if the car is in a unexpected lane above the limit of lanes.
   @Test public void tryToChangeLaneFromLaneAboveExpected()  {
		when(auto.r1.getReading()).thenReturn(25);
        when(auto.r2.getReading()).thenReturn(25);
 	  	when(auto.r3.getReading()).thenReturn(25);
 	  	when(auto.l1.getReading()).thenReturn(25);
		when(auto.r4.getReading()).thenReturn(25);
        when(auto.r5.getReading()).thenReturn(25);
 	  	when(auto.r6.getReading()).thenReturn(25);
 	  	when(auto.l2.getReading()).thenReturn(25);
 	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
 	  	auto.carPos.setY(50);
 	   	auto.carPos.setX(4);
	   	
	   	assertEquals("Can't change from this lane", auto.changeLane(auto, radars, lidars));
  }
   //Test 39 || Test that it won't change lane if a negative value is given as lane.
   @Test public void tryToChangeLaneFromLaneUnderExpected()  {
	   	when(auto.r1.getReading()).thenReturn(25);
        when(auto.r2.getReading()).thenReturn(25);
 	  	when(auto.r3.getReading()).thenReturn(25);
 	  	when(auto.l1.getReading()).thenReturn(25);
	   	when(auto.r4.getReading()).thenReturn(25);
        when(auto.r5.getReading()).thenReturn(25);
 	  	when(auto.r6.getReading()).thenReturn(25);
 	  	when(auto.l2.getReading()).thenReturn(25);
 	 		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
 	  	
 	  	auto.carPos.setY(50);
 	   	auto.carPos.setX(-1);
	   	
	   	assertEquals("Can't change from this lane", auto.changeLane(auto, radars, lidars));
  }
 //Test 40 || Tests 2+ faulty readings on the second query
   @Test public void twoFaultyReadingsQuery2() {	
  	when(auto.r1.getReading()).thenReturn(23);
    	when(auto.r2.getReading()).thenReturn(25);
    	when(auto.r3.getReading()).thenReturn(28);
    	when(auto.l1.getReading()).thenReturn(23);
    	when(auto.r4.getReading()).thenReturn(59);
    	when(auto.r5.getReading()).thenReturn(22);
    	when(auto.r6.getReading()).thenReturn(401);
    	when(auto.l2.getReading()).thenReturn(23);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidars, 0));
   }
   
  //Test 41 || Tests car detection on the second query
   @Test public void carDetectedQuery2() {	
 	when(auto.r1.getReading()).thenReturn(23);
    	when(auto.r2.getReading()).thenReturn(25);
    	when(auto.r3.getReading()).thenReturn(28);
    	when(auto.l1.getReading()).thenReturn(23);
    	when(auto.r4.getReading()).thenReturn(21);
    	when(auto.r5.getReading()).thenReturn(3);
    	when(auto.r6.getReading()).thenReturn(24);
    	when(auto.l2.getReading()).thenReturn(23);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidars, 0));
  }
   
  //Test 42 || Tests no car detection on the second query
   @Test public void noCarDetectedQuery2() {	
 	when(auto.r1.getReading()).thenReturn(23);
    	when(auto.r2.getReading()).thenReturn(25);
    	when(auto.r3.getReading()).thenReturn(28);
    	when(auto.l1.getReading()).thenReturn(23);
    	when(auto.r4.getReading()).thenReturn(30);
    	when(auto.r5.getReading()).thenReturn(28);
    	when(auto.r6.getReading()).thenReturn(21);
    	when(auto.l2.getReading()).thenReturn(23);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidars, 0));
  }
   
  //Test 43 || Tests having one faulty reading on the second query
   @Test public void oneFaultyReadingQuery2() {	
 	when(auto.r1.getReading()).thenReturn(23);
    	when(auto.r2.getReading()).thenReturn(25);
    	when(auto.r3.getReading()).thenReturn(28);
    	when(auto.l1.getReading()).thenReturn(23);
    	when(auto.r4.getReading()).thenReturn(31);
    	when(auto.r5.getReading()).thenReturn(220);
    	when(auto.r6.getReading()).thenReturn(40);
    	when(auto.l2.getReading()).thenReturn(23);
   		
    	Lidar lidars[] = {auto.l1, auto.l2};
    	Radar[][] radars = {{auto.r1, auto.r2, auto.r3}, {auto.r4, auto.r5, auto.r6}};	
    	
    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidars, 0));
  }

}

