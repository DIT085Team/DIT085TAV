/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import org.mockito.Mock;


import static org.junit.Assert.*;

import org.junit.Before;

public class CarTest {
	private CarImp auto;
	//Instantiating a new automobile object for each test case
	@Before
    public void setUp() {
		auto = new CarImp();
    }
	//Test 1 || Test that WhereIs returns a value
    @Test public void testThatWhereIsReturnNotNull(){
    	assertNotNull(auto.whereIs());
    }
    //Test 2 ||  Tests that it will return the values of the initialized car.
    @Test public void testThatWhereIsReturnAutoXAndY(){
    	assertArrayEquals(new int [] {auto.x, auto.y}, auto.whereIs());
    }
    //Test 3 || Tests that it returns the values of the car even if it's unexpected values and outside the track.
    @Test public void testWhereIsUnexpectedVaules() {
    	auto.x = -567;
    	auto.y = 1337;
    	//assertEquals(auto.whereIs(), "Longitude:" + auto.x + " latitude:" + auto.y);
    	assertArrayEquals(new int [] {-567, 1337}, auto.whereIs());
    }
    
    //Test 4 ||  This test runs the moveForward method from the position 96, 
    // the car should not moveForward.
    @Test public void maxDistance() {
	    auto.y=96;
		auto.moveForward(auto);
		System.out.println(auto.y);
	    assertEquals("we check if starting value is correct",96, auto.y);
	}
    //Test 5 ||  This test will test when the input is 50 the output should give 55
    // else the test case fails.	
    @Test public void fiveDistance() {
	    auto.y=50;
		auto.moveForward(auto);
		System.out.println(auto.y);
	    assertEquals("we check if starting value is correct",55, auto.y);
    }
    //Test 6 ||  This test runs the moveForward method from the position 97, 
    // the car should not moveForward.	
    @Test public void maxDistanceV2() {
	    auto.y=97;
		auto.moveForward(auto);
		System.out.println(auto.y);
	    assertEquals("we check if starting value is correct",97, auto.y);
    }
    //Test 7 ||  this test is when a faulty position is given, the output should return -1.	
    @Test public void underDistance() {
	    auto.y=-1;
	    assertEquals("we check if starting value is correct",-1, auto.moveForward(auto));
    }
    //Test 8 ||  this test is when a faulty position is given, the output should return -1.	
    @Test public void overDistance() {
	    auto.y=101;
	    assertEquals("we check if starting value is correct",-1, auto.moveForward(auto));
    }
    //Test 9 ||  This test will test when the input is 95 the output should give 100
    // else the test case fails.	
    @Test public void distanceTest() {
	    auto.y=95;
	    auto.moveForward(auto);
		//System.out.println(auto.y);
	    assertEquals("we check if starting value is correct",100,auto.y);
    }
    
    //Test 10 || Testing a normal scenario were a car is not detected.
    @Test public void noCarDetected() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(30);
   		radars[1] = new RadarImp(34);
   		radars[2] = new RadarImp(28);
   		
    	LidarImp lidar = new LidarImp(26);
    	
    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 11 || Testing with one of the sensors having a faulty reading but otherwise no car is detected.
    @Test public void oneFaultyReading() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(930);
   		radars[1] = new RadarImp(41);
   		radars[2] = new RadarImp(44);
   		
    	LidarImp lidar = new LidarImp(39);
    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 12 || Testing with 2 faulty readings from radar 1 and 2. An error should be returned.
    @Test public void twoFaultyReadings1() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(865);
   		radars[1] = new RadarImp(430);
   		radars[2] = new RadarImp(17);
   		
    	LidarImp lidar = new LidarImp(15);
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 13 || Testing with 2 faulty readings from radar 3 and the lidar. An error should be returned.
    @Test public void twoFaultyReadings2() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(28);
   		radars[1] = new RadarImp(30);
   		radars[2] = new RadarImp(460);
   		
    	LidarImp lidar = new LidarImp(370);
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 14 || Testing 2 faulty readings with a sensor also detecting a nearby car.
    //Error about the faulty readings should take precedence, thus returning an error.
    @Test public void twoFaultyReadingsWithNearbyCar() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(4);
   		radars[1] = new RadarImp(259);
   		radars[2] = new RadarImp(270);
   		
    	LidarImp lidar = new LidarImp(15);
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 15 || Testing if the car confirms the detection of a car from radar 1
    @Test public void nearbyCarDetectedRadar1() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(4);
   		radars[1] = new RadarImp(10);
   		radars[2] = new RadarImp(7);
   		
    	LidarImp lidar = new LidarImp(13);
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 16 || Testing if the car confirms the detection of a car from radar 2
    @Test public void nearbyCarDetectedRadar2() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(12);
   		radars[1] = new RadarImp(3);
   		radars[2] = new RadarImp(8);
   		
    	LidarImp lidar = new LidarImp(9);
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 17 || Testing if the car confirms the detection of a car from radar 3
    @Test public void nearbyCarDetectedRadar3() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(8);
   		radars[1] = new RadarImp(10);
   		radars[2] = new RadarImp(2);
   		
    	LidarImp lidar = new LidarImp(7);
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 18 || Testing if the car confirms the detection of a car from lidar
    @Test public void nearbyCarDetectedRadar4() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(13);
   		radars[1] = new RadarImp(14);
   		radars[2] = new RadarImp(12);
   		
    	LidarImp lidar = new LidarImp(3);
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 19 || Testing 1 faulty reading with a sensor also detecting a nearby car.
    //Return car detected.
    @Test public void oneFaultyReadingWithNearbyCar() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(300);
   		radars[1] = new RadarImp(2);
   		radars[2] = new RadarImp(13);
   		
    	LidarImp lidar = new LidarImp(7);
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 20 || Testing how the system handles a negative faulty reading.
    //Return faulty readings error as well.
    @Test public void negativeFaultyReadings() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(-42);
   		radars[1] = new RadarImp(18);
   		radars[2] = new RadarImp(15);
   		
    	LidarImp lidar = new LidarImp(203);
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 21 || Testing the lowest possible detection reading.
    @Test public void nearbyCarDetectedLowerBoundary() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(0);
   		radars[1] = new RadarImp(12);
   		radars[2] = new RadarImp(30);
   		
    	LidarImp lidar = new LidarImp(0);
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 22 || Testing the highest possible detection reading.
    @Test public void nearbyCarDetectedUpperBoundary() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(5);
   		radars[1] = new RadarImp(14);
   		radars[2] = new RadarImp(17);
   		
    	LidarImp lidar = new LidarImp(5);
    	assertEquals("Car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 23 || Testing highest possible non-faulty reading
    @Test public void noCarDetectedUpperBoundary() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(50);
   		radars[1] = new RadarImp(25);
   		radars[2] = new RadarImp(50);
   		
    	LidarImp lidar = new LidarImp(23);
    	assertEquals("No car detected", auto.leftLaneDetect(radars, lidar, 1));
    }
    
    //Test 24 || Testing how the system handles all sensor readings being faulty.
    @Test public void allFaultyReadings() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(305);
   		radars[1] = new RadarImp(800);
   		radars[2] = new RadarImp(340);
   		
    	LidarImp lidar = new LidarImp(200);
    	assertEquals("Error: faulty readings", auto.leftLaneDetect(radars, lidar, 1));
    }
	
	//Test 25 || Testing how the system handles one false, zero and positive reading .
    @Test public void detectedCarOnLeftLanePostionTwoWithZeroReading() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(5);
   		radars[1] = new RadarImp(4);
   		radars[2] = new RadarImp(17);
   		
    	LidarImp lidar = new LidarImp(5);

    	auto.y = 0;
    	auto.x = 2;
    	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidar));
    }
    
	  //Test 26 || Testing how the system handles one false,two positive reading .
	@Test public void detectedCarOnLeftLanePostionTwoWithTwoPositive() {
    	RadarImp[] radars = new RadarImp[3];
   		radars[0] = new RadarImp(0);
   		radars[1] = new RadarImp(12);
   		radars[2] = new RadarImp(30);
   		
    	LidarImp lidar = new LidarImp(0);

		auto.y = 20;
	  	auto.x = 2;
	  	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidar));
	 }
   
  //Test 27 || Testing how the system handles all positive reading .
   @Test public void noDetectedCarOnLeftLanePostion2AllPositive() {
   		RadarImp[] radars = new RadarImp[3];
  		radars[0] = new RadarImp(930);
  		radars[1] = new RadarImp(41);
  		radars[2] = new RadarImp(44);
  		
  		LidarImp lidar = new LidarImp(39);
  		
	   	auto.y = 20;
	   	auto.x = 2;
	   	assertEquals("Lane changed", auto.changeLane(auto, radars, lidar));
   }
	
  //Test 28 || Testing how the system handles negative reading .
  @Test public void noDetectedCarOnLeftLanePostionThreeWithNegativeReading() {
  		RadarImp[] radars = new RadarImp[3];
 		radars[0] = new RadarImp(30);
 		radars[1] = new RadarImp(34);
 		radars[2] = new RadarImp(28);
 		
 		LidarImp lidar = new LidarImp(26);

	  	auto.y = -1;
	  	auto.x = 3;
	  	assertEquals("y value incorrrect", auto.changeLane(auto, radars, lidar));
  }
  
  //Test 29 || Testing how the system handles one false,two positive reading .
  @Test public void noDetectedCarOnLeftLanePostionThreeOutOfBoundReading() {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(930);
		radars[1] = new RadarImp(41);
		radars[2] = new RadarImp(44);
		
		LidarImp lidar = new LidarImp(39);

	  	auto.y = 96;
	  	auto.x = 3;
	  	assertEquals("y value incorrrect", auto.changeLane(auto, radars, lidar));
  }
  
  //Test 30 || Testing faulty readings on lower bounds value .
    @Test public void errorFaultyReadingLeftLaneTwoWithNegativePosition() {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(4);
		radars[1] = new RadarImp(259);
		radars[2] = new RadarImp(270);
		
		LidarImp lidar = new LidarImp(15);
		
    	auto.y = -1;
    	auto.x = 2;
    	assertEquals("Lane change failed,Error:faulty readings", auto.changeLane(auto, radars, lidar));
   }
	
   //Test 31 || Testing how the negative value when negative input detected .
    @Test public void negativeDetectedCarOnLeftLanePostionThree() {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(8);
		radars[1] = new RadarImp(10);
		radars[2] = new RadarImp(2);
		
		LidarImp lidar = new LidarImp(7);
		
    	auto.y = -1;
    	auto.x = 3;
    	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidar));
  }
	
  //Test 32 || Testing how the negative value when negative input detected .
    @Test public void noDetectedCarOnLeftLanePostionThreeAllPositive() {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(930);
		radars[1] = new RadarImp(41);
		radars[2] = new RadarImp(44);
		
		LidarImp lidar = new LidarImp(39);

    	auto.y = 70;
    	auto.x = 3;
    	assertEquals("Lane changed", auto.changeLane(auto, radars, lidar));
    }
    //Test 33 || 
    @Test public void errorFaultyReadingLeftLaneThreeWithUpperBound() {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(-42);
		radars[1] = new RadarImp(18);
		radars[2] = new RadarImp(15);
		
		LidarImp lidar = new LidarImp(203);
		
    	auto.y = 96;
    	auto.x = 3;
    	assertEquals("Lane change failed,Error:faulty readings", auto.changeLane(auto, radars, lidar));
    }
    //Test 34 || 
   @Test public void errorFaultyReadingLeftLaneOneWithZeroReading() {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(305);
		radars[1] = new RadarImp(800);
		radars[2] = new RadarImp(340);
		
		LidarImp lidar = new LidarImp(200);
		
    	auto.y = 0;
    	auto.x = 1;
    	assertEquals("Lane change failed,Error:faulty readings", auto.changeLane(auto, radars, lidar));
    }
	//Test 35 || 
    @Test public void detectedCarOnLanePostionOneWithZeroReading() {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(5);
		radars[1] = new RadarImp(14);
		radars[2] = new RadarImp(17);
		
		LidarImp lidar = new LidarImp(5);

    	auto.y = 0;
    	auto.x = 1;
    	assertEquals("Lane change failed car detected", auto.changeLane(auto, radars, lidar));
    }
    
     //Test 36 || Testing readings on lower bounds value 
   @Test public void noDetectedCarOnLeftLanePostionThreeWithBoundReading()  {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(930);
		radars[1] = new RadarImp(41);
		radars[2] = new RadarImp(44);
		LidarImp lidar = new LidarImp(39);
		auto.y = 95;
	   	auto.x = 3;
	   	assertEquals("Lane changed", auto.changeLane(auto, radars, lidar));
   }
   //Test 37 || This test makes sure that the car won't change lane if the car is in the leftmost lane.
   @Test public void tryToChangeLaneFromLaneOne()  {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(25);
		radars[1] = new RadarImp(25);
		radars[2] = new RadarImp(25);
		LidarImp lidar = new LidarImp(25);
		auto.y = 50;
	   	auto.x = 1;
	   	assertEquals("Can't change from this lane", auto.changeLane(auto, radars, lidar));
  }
   //Test 38 || Test that the car won't move if the car is in a unexpected lane above the limit of lanes.
   @Test public void tryToChangeLaneFromLaneAboveExpected()  {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(25);
		radars[1] = new RadarImp(25);
		radars[2] = new RadarImp(25);
		LidarImp lidar = new LidarImp(25);
		auto.y = 50;
	   	auto.x = 4;
	   	assertEquals("Can't change from this lane", auto.changeLane(auto, radars, lidar));
  }
   //Test 39 || Test that it won't change lane if a negative value is given as lane.
   @Test public void tryToChangeLaneFromLaneUnderExpected()  {
		RadarImp[] radars = new RadarImp[3];
		radars[0] = new RadarImp(25);
		radars[1] = new RadarImp(25);
		radars[2] = new RadarImp(25);
		LidarImp lidar = new LidarImp(25);
		auto.y = 50;
	   	auto.x = -1;
	   	assertEquals("Can't change from this lane", auto.changeLane(auto, radars, lidar));
  }
   
}
